#define M1F 53
#define M1B 51
#define M2F 49
#define M2B 47
#define M3F 52
#define M3B 50
#define M4F 48
#define M4B 46

#define M1EN 2
#define M2EN 3
#define M3EN 5
#define M4EN 4

const int hv=255;
const int lv=0;

int Trigpin = 44;
int Echopin = 45; 
long duration ; 
long distance ; 
int state =0;

int M0 = 38;    //Declaration of the sensor input pin
int R1 = 37;
int R2 = 36;
int L1 = 34;
int L2 = 35;

int lastTurn=0;

/*---------------forward function------------------*/
void forward (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW) ;
    digitalWrite(M2F,HIGH);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,HIGH);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------forward left function---------------------*/
void forwardLeft (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,HIGH);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,HIGH);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,lv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,lv);
    
    state=0;
}
/*---------------backwardRIGHT function------------------*/
void backwardRight (){
     digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,lv);
    analogWrite(M3EN,lv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------backwardLeft function------------------*/
void backwardLeft (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,lv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,lv);
    state=0;
}


/*---------------backward function------------------*/
void backward (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------stop function---------------------*/
void STOP (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,lv);
    analogWrite(M2EN,lv);
    analogWrite(M3EN,lv);
    analogWrite(M4EN,lv);
    state=0;
}
/*---------------left function---------------------*/
void left (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,HIGH);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,HIGH);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------right function---------------------*/
void right (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------forwardRight function---------------------*/
void forwardRight (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,lv);
    analogWrite(M3EN,lv);
    analogWrite(M4EN,hv);
    state=0;
}
/*--------------------------USR---------------------*/
    void USR(){
        digitalWrite(Trigpin , LOW);
        delayMicroseconds (2);
        
        digitalWrite(Trigpin , HIGH );
        delayMicroseconds (10);
        digitalWrite(Trigpin , LOW );
        
        duration = pulseIn (Echopin , HIGH);
        distance = duration * 0.034/2 ; 
    }

void lineTracking() {
      bool valM0 = digitalRead (M0);    // The current signal of the sensor will be read
      bool valR1 = digitalRead (R1);
      bool valR2 = digitalRead (R2);
      bool valL1 = digitalRead (L1);
      bool valL2 = digitalRead (L2);

 if(valM0 == HIGH && valR1 == LOW && valL1 == LOW) {
      forward ();
      lastTurn=0;
      delay(50);
 }
 else
   {
     if(valR1 == HIGH && valM0 == LOW && valL1 == LOW) {
       right();
       lastTurn=1;
       delay(10);
     }
     
     else if(valL1 == HIGH && valM0 == LOW && valR1 == LOW ) {
       left();
       lastTurn=2;
       delay(10);
     }

     else if(valR1 == HIGH && valM0 == HIGH && valL1 == LOW) {
       right();
       lastTurn=1;
       delay(10);
     }

     else if(valL1 == HIGH && valM0 == HIGH && valR1 == LOW ) {
       left();
       lastTurn=2;
       delay(10);
     }

      else if(valM0 == HIGH && valR1 == HIGH && valL1 == HIGH) {
      forward ();
      delay(10);
     }

      else if(valM0 == LOW && valR1 == LOW && valL1 == LOW) {
        
           if(lastTurn==0){
               forward ();
               delay (10);
      
             }       
            else if (lastTurn==1){
               right ();
               delay (10);
        
            }      
            else if (lastTurn==2){
              left ();
              delay (10);
           }
        }

        else {
           STOP();
        }
          }
          }
     


/*===================================================*/
void setup() {
  // put your setup code here, to run once:
pinMode (Trigpin,OUTPUT);
pinMode (Echopin ,INPUT);
pinMode(M1F,OUTPUT);
pinMode(M1B,OUTPUT);
pinMode(M2F,OUTPUT);
pinMode(M2B,OUTPUT);
pinMode(M3F,OUTPUT);
pinMode(M3B,OUTPUT);
pinMode(M4F,OUTPUT);
pinMode(M4B,OUTPUT);
Serial3.begin(9600);

pinMode (M0, INPUT) ;   // Initialization sensor pin
pinMode (R1, INPUT) ;
pinMode (R2, INPUT) ;
pinMode (L1, INPUT) ;
pinMode (L2, INPUT) ;

}


void loop() {
  // put your main code here, to run repeatedly:

USR();


if (Serial3.available ()>0)  
   state = Serial3.read();

if (state == 'A') {
  lineTracking();
  }
  else if (state == 'B'){
      if (distance <=20){
          
        backwardRight ();
        delay(1000);
        STOP();
      }
      
      else {
          /*------------------FORWARD---------------*/
          if(state== '8') {
              forward ();
          }
          /*---------------------BACKWARD---------------*/
          else if (state == '2') {
              backward();
          }
          /*----------------------STOP------------------*/
          else if (state == '0') {
              STOP ();
          }
          /*----------------------RIGHT----------------*/
          else if (state == '6') {
              right ();
          }
          /*----------------------LEFT--------------------*/
          else if (state == '4') {
              left ();
          }
          /*----------------------forwardLEFT--------------------*/
          else if (state == '7') {
              forwardLeft ();
          }
          /*----------------------forwardRIGHT--------------------*/
          else if (state == '9') {
              forwardRight ();
          }
          /*----------------------backwardRIGHT--------------------*/
          else if (state == '3') {
              backwardRight ();
          }
          /*----------------------backwardLEFT--------------------*/
          else if (state == '1') {
              backwardLeft ();
          }
      }
      }
}
