#define M1F 53
#define M1B 51
#define M2F 49
#define M2B 47
#define M3F 52
#define M3B 50
#define M4F 48
#define M4B 46

#define M1EN 2
#define M2EN 3
#define M3EN 5
#define M4EN 4
# define photointerrupter_l 22
# define photointerrupter_2 23
# define IN1 2
# define IN2 3
# define IN3 4
# define IN4 7
# define ENA 5
# define ENB 6
# define width_car 15

#define stepdis     5105 

const int hv=150;
const int lv=0;

int Trigpin = 44;
int Echopin = 45; 
long duration ; 
long distance ; 
int state =0;

int L = 10 ;
int W = 10 ;

int M0 = 38;    //Declaration of the sensor input pin
int R1 = 37;
int R2 = 36;
int L1 = 34;
int L2 = 35;

int lastTurn=0;
int usa = 0 ;
bool reverseDirections=0;
int mov=0 , trn=0 ; //for movement

void moveCar(int movement , int turning) //takes percentage of movement and turning the analog stick is reversed in the y direction in the app, up is negative and down is positive
{  
                                     //positive for backward movement and right turning  negative for forward movement and left turning
  if(movement==0&&turning==0)
  {
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,LOW);
  }
  else
  {
    int left=0 ,right=0 ;       //speed of each wheel
    bool forL=LOW , forR=LOW;     //Direction of each wheel
    if(movement>0)
    {
      turning =-1*turning;     //when moving backwards the turning value is reversed
    }
    right=turning;
    left =-1*right;
    left=left+ movement;      
    right=right+movement;
    if (right<0)          //test for negative values to determine direction then make them positive for using
    {
      forR=HIGH;
      right=0-right;
    } 
    else forR=LOW;
    if (left<0)
    {
      forL=HIGH;
      left=0-left;
    }
    else forL=LOW;

    right=map(right,0,100,90,255); 
    left=map(left,0,100,90,255);
    left=constrain(left,0,255);
    right=constrain(right,0,255);
    
    digitalWrite(M1F,forR);
    digitalWrite(M1B,!forR);
    digitalWrite(M2F,forL);
    digitalWrite(M2B,!forL);
    digitalWrite(M3F,forL);
    digitalWrite(M3B,!forL);
    digitalWrite(M4F,forR);
    digitalWrite(M4B,!forR);
    analogWrite(M1EN,right);
    analogWrite(M2EN,left);
    analogWrite(M3EN,left);
    analogWrite(M4EN,right);
  }
}

/*---------------forward function------------------*/
void forward (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW) ;
    digitalWrite(M2F,HIGH);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,HIGH);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------forward left function---------------------*/
void forwardRight (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,HIGH);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,HIGH);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,lv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,lv);
    
    state=0;
}
/*---------------backwardRIGHT function------------------*/
void backwardLeft (){
     digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,lv);
    analogWrite(M3EN,lv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------backwardLeft function------------------*/
void backwardRight (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,lv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,lv);
    state=0;
}


/*---------------backward function------------------*/
void backward (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------stop function---------------------*/
void STOP (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,lv);
    analogWrite(M2EN,lv);
    analogWrite(M3EN,lv);
    analogWrite(M4EN,lv);
    state=0;
}
/*---------------left function---------------------*/
void right (){
    digitalWrite(M1F,LOW);
    digitalWrite(M1B,HIGH);
    digitalWrite(M2F,HIGH);
    digitalWrite(M2B,LOW);
    digitalWrite(M3F,HIGH);
    digitalWrite(M3B,LOW);
    digitalWrite(M4F,LOW);
    digitalWrite(M4B,HIGH);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------right function---------------------*/
void left (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,hv);
    analogWrite(M3EN,hv);
    analogWrite(M4EN,hv);
    state=0;
}
/*---------------forwardRight function---------------------*/
void forwardLeft (){
    digitalWrite(M1F,HIGH);
    digitalWrite(M1B,LOW);
    digitalWrite(M2F,LOW);
    digitalWrite(M2B,HIGH);
    digitalWrite(M3F,LOW);
    digitalWrite(M3B,HIGH);
    digitalWrite(M4F,HIGH);
    digitalWrite(M4B,LOW);
    analogWrite(M1EN,hv);
    analogWrite(M2EN,lv);
    analogWrite(M3EN,lv);
    analogWrite(M4EN,hv);
    state=0;
}


/*--------------------------USR---------------------*/
    void USR(){
        digitalWrite(Trigpin , LOW);
        delayMicroseconds (2);
        
        digitalWrite(Trigpin , HIGH );
        delayMicroseconds (10);
        digitalWrite(Trigpin , LOW );
        
        duration = pulseIn (Echopin , HIGH);
        distance = duration * 0.034/2 ;

        if (distance <=20){
          usa = 1;
          backwardRight ();
          delay(1000);
          STOP();
        }

    }

    void lineTracking() {
      bool valM0 = digitalRead (M0);    // The current signal of the sensor will be read
      bool valR1 = digitalRead (R1);
      bool valR2 = digitalRead (R2);
      bool valL1 = digitalRead (L1);
      bool valL2 = digitalRead (L2);

 if(valM0 == HIGH && valR1 == LOW && valL1 == LOW) {
      forward ();
      lastTurn=0;
      delay(10);
 }
 else
   {
     if(valR1 == HIGH && valM0 == LOW && valL1 == LOW) {
       right();
       lastTurn=1;
       delay(10);
     }
     
     else if(valL1 == HIGH && valM0 == LOW && valR1 == LOW ) {
       left();
       lastTurn=2;
       delay(10);
     }

     else if(valR1 == HIGH && valM0 == HIGH && valL1 == LOW) {
       right();
       lastTurn=1;
       delay(10);
     }

     else if(valL1 == HIGH && valM0 == HIGH && valR1 == LOW ) {
       left();
       lastTurn=2;
       delay(10);
     }

      else if(valM0 == HIGH && valR1 == HIGH && valL1 == HIGH) {
      forward ();
      delay(10);
     }

      else if(valM0 == LOW && valR1 == LOW && valL1 == LOW) {
        
           if(lastTurn==0){
               forward ();
               delay (10);
      
             }       
            else if (lastTurn==1){
               right ();
               delay (10);
        
            }      
            else if (lastTurn==2){
              left ();
              delay (10);
           }
        }

        else {
           STOP();
        }
   }
}
     
void Forward(int dist);    //distance in cm
void turn(int angle);     //angle in degrees
void drive_rect(int length , int width);    //length and width in cm


/*===================================================*/
void setup() {
  // put your setup code here, to run once:
pinMode (Trigpin,OUTPUT);
pinMode (Echopin ,INPUT);
pinMode(M1F,OUTPUT);
pinMode(M1B,OUTPUT);
pinMode(M2F,OUTPUT);
pinMode(M2B,OUTPUT);
pinMode(M3F,OUTPUT);
pinMode(M3B,OUTPUT);
pinMode(M4F,OUTPUT);
pinMode(M4B,OUTPUT);
Serial3.begin(9600);

pinMode (M0, INPUT) ;   // Initialization sensor pin
pinMode (R1, INPUT) ;
pinMode (R2, INPUT) ;
pinMode (L1, INPUT) ;
pinMode (L2, INPUT) ;
pinMode(photointerrupter_l,INPUT);
  pinMode(photointerrupter_2,INPUT);
  pinMode(IN1,OUTPUT);
  pinMode(IN2,OUTPUT);
  pinMode(IN3,OUTPUT);
  pinMode(IN4,OUTPUT);
  pinMode(ENA,OUTPUT);
  pinMode(ENB,OUTPUT);
}


void loop() {
  // put your main code here, to run repeatedly:

//USR();


if (Serial3.available ())  
   state = Serial3.read();

   if ( usa == 0 )
   {
    switch(state)
    {
      case 'X' :    //the analog pad reading send   X....Y....
          trn=Serial.parseInt();
          state=Serial.read();
          if(state=='Y')
          {
            mov=Serial.parseInt();
            moveCar(mov,trn);
          }
        break;

      case 'L' :
        lineTracking();
      break;
      
      case '8' :
        forward ();
      break;

      case '2' :
        backward();
      break;

      case '0' :
        STOP ();
      break;

      case '6' :
        right ();
      break;

      case '4' :
        left ();
      break;

      case '7' :
        forwardLeft ();
      break;

      case '9' :
        forwardRight ();
      break;

      case '3' :
        backwardRight ();
      break;

      case '1' :
        backwardLeft ();
      break;

      case 'M':
       L = Serial.parseInt();
      if ( state == 'N'){
       W = Serial.parseInt() ;
        drive_rect( L , W );
        }
      break;

      case 'H':
       int d = Serial.parseInt();
       Forward(d) ;
      break;


      }
   }
   else {
    STOP () ;
    }
delay (10);

//drive_rect();
}
void Forward(int dist)
{ /*
  bool flag=digitalRead(photointerrupter_l);
  forward();
  for (int i=0;i<dist;)
  {
    if(digitalRead(photointerrupter_l) == 1 && flag == 0)
    {
      i++;
      flag=1;
    }
    if( digitalRead(photointerrupter_l) == 0)
    {
      flag=0;
    }
  }
  STOP(); */

if(dist==0)STOP();
  
  bool st1 =digitalRead(photointerrupter_l);
  bool st2 =digitalRead(photointerrupter_2);
  bool ls1 =st1 , ls2 =st2 ;
  
  int i=0 , j=0;
  forward();
  delay(500);
  do
  {
    forward();
    delay(50);
    st1= digitalRead(photointerrupter_l);
    st2= digitalRead(photointerrupter_2);
    if((st1&&!ls1)||(!st1&&ls1))
    {
      i++;
      ls1=st1;
    }
    if((st2&&!ls2)||(!st2&&ls2))
    {
      j++;
      ls2=st2;
    }
  }while((long)(i* stepdis) <((long)dist*10000));
  moveCar(0,0); 
}
  
void turn(int angle)
{
  float dist=(float)angle*3.1415926535*width_car/360.0;
  bool flag=digitalRead(photointerrupter_l);
  digitalWrite(IN1,HIGH);
  digitalWrite(IN2,LOW);
  digitalWrite(IN3,LOW);
  digitalWrite(IN4,HIGH);
  analogWrite(ENA,255);
  analogWrite(ENB,255);
  for (int i=0;i<dist;)
  {
    if(digitalRead(photointerrupter_l)&&!flag)
    {
      i++;
      flag=1;
    }
    if(!digitalRead(photointerrupter_l))
    {
      flag=0;
    }
  }
  digitalWrite(IN1,LOW);
  digitalWrite(IN2,LOW);
  digitalWrite(IN3,LOW);
  digitalWrite(IN4,LOW);
  analogWrite(ENA,0);
  analogWrite(ENB,0);
  
}
void drive_rect(int length , int width)
{
  Forward(length);
  turn(90);
  Forward(width);
  turn(90);
  Forward(length);
  turn(90);
  Forward(width);
  turn(90);
      
}
